# Morum OSS Serverless API
#
# A simple serverless API for Morum OSS
# Authors: Singithi Kandage, Aaron Bassett, Sean Dunham

service: morum-oss-api
# app and org for use with dashboard.serverless.com
app: morum-oss-api-app
org: singithikandage

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x

stage: production
region: ca-central-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# packaging information
package:
  individually: true

functions:
  # Classroom endpoints
  createClassroom:
    handler: ./functions/classrooms/createClassroom.createClassroom
    events:
      - http:
          path: classroom
          method: post
          cors: true
  getClassroom:
    handler: ./functions/classrooms/getClassroom.getClassroom
    events:
      - http:
          path: classroom/{id}
          method: get
          cors: true
  updateClassroom:
    handler: ./functions/classrooms/updateClassroom.updateClassroom
    events:
      - http:
          path: classroom/{id}
          method: put
          cors: true
  deleteClassroom:
    handler: ./functions/classrooms/deleteClassroom.deleteClassroom
    events:
      - http:
          path: classroom/{id}
          method: delete
          cors: true
  # Classroom Users endpoints
  createClassroomUser:
    handler: ./functions/classroomUsers/createClassroomUser.createClassroomUser
    events:
      - http:
          path: classroomUser
          method: post
          cors: true
  getClassroomUsers:
    handler: ./functions/classroomUsers/getClassroomUser.getClassroomUsers
    events:
      - http:
          path: classroomUser/getAllUsers/{classroomID}
          method: get
          cors: true
  getClassroomUser:
    handler: ./functions/classroomUsers/getClassroomUser.getClassroomUser
    events:
      - http:
          path: classroomUser/getUser/{id}
          method: get
          cors: true
  updateClassroomUser:
    handler: ./functions/classroomUsers/updateClassroomUser.updateClassroomUser
    events:
      - http:
          path: classroomUser/{id}
          method: put
          cors: true
  deleteClassroomUser:
    handler: ./functions/classroomUsers/deleteClassroomUser.deleteClassroomUser
    events:
      - http:
          path: classroomUser/{id}
          method: delete
          cors: true
  # Instances endpoints
  createInstance:
    handler: ./functions/instances/createInstance.createInstance
    events:
      - http:
          path: instance
          method: post
          cors: true
  getInstance:
    handler: ./functions/instances/getInstance.getInstance
    events:
      - http:
          path: instance/{id}
          method: get
          cors: true
  deleteInstance:
    handler: ./functions/instances/deleteInstance.deleteInstance
    events:
      - http:
          path: instance/{id}
          method: delete
          cors: true
  # Projects endpoints
  createProjects:
    handler: ./functions/projects/createProject.createProject
    events:
      - http:
          path: project
          method: post
          cors: true
  getProject:
    handler: ./functions/projects/getProject.getProject
    events:
      - http:
          path: project/{id}
          method: get
          cors: true
  deleteProject:
    handler: ./functions/projects/deleteProject.deleteProject
    events:
      - http:
          path: project/{id}
          method: delete
          cors: true
  # Templates endpoints
  createTemplate:
    handler: ./functions/template/createTemplate.createTemplate
    events:
      - http:
          path: template
          method: post
          cors: true
  getTemplate:
    handler: ./functions/template/getTemplate.getProject
    events:
      - http:
          path: template/{id}
          method: get
          cors: true
  # User endpoints
  createUser:
    handler: ./functions/users/createUser.createUser
    events:
      - http:
          path: user
          method: post
          cors: true
  getUser:
    handler: ./functions/users/getUser.getUser
    events:
      - http:
          path: user/{id}
          method: get
          cors: true
  deleteUser:
    handler: ./functions/user/deleteUser.deleteUser
    events:
      - http:
          path: user/{id}
          method: delete
          cors: true

# plugins
plugins:
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  serverless-offline:
    httpPort: 4000
    
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

# Morum OSS Serverless API
#
# A simple serverless API for Morum OSS
# Authors: Singithi Kandage, Aaron Bassett, Sean Dunham

service: morum-oss-api
# app and org for use with dashboard.serverless.com
app: morum-oss-api-app
org: singithikandage

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.currentStage}
  region: ca-central-1
  # iamRoleStatements: # permissions for all of your functions can be set here
  # - Effect: Allow
  #   Action: # Gives permission to DynamoDB tables in a specific region
  #     - dynamodb:DescribeTable
  #     - dynamodb:Query
  #     - dynamodb:Scan
  #     - dynamodb:GetItem
  #     - dynamodb:PutItem
  #     - dynamodb:UpdateItem
  #     - dynamodb:DeleteItem
  #   Resource: 'arn:aws:dynamodb:ca-central-1:*:*'
  environment:
    IS_OFFLINE: ${file(./config.${self:custom.currentStage}.json):IS_OFFLINE}
    CONFIG_MYSQL_ENDPOINT: ${file(./config.${self:custom.currentStage}.json):CONFIG_MYSQL_ENDPOINT}
    CONFIG_MYSQL_DATABASE: ${file(./config.${self:custom.currentStage}.json):CONFIG_MYSQL_DATABASE}
    CONFIG_MYSQL_USER: ${file(./config.${self:custom.currentStage}.json):CONFIG_MYSQL_USER}
    CONFIG_MYSQL_PASSWORD: ${file(./config.${self:custom.currentStage}.json):CONFIG_MYSQL_PASSWORD}
    CONFIG_S3_BUCKET: ${file(./config.${self:custom.currentStage}.json):CONFIG_S3_BUCKET}
    CONFIG_DYNAMODB_ENDPOINT: ${file(./config.${self:custom.currentStage}.json):CONFIG_DYNAMODB_ENDPOINT}
    CONFIG_CLASSROOM_TABLE: ${file(./config.${self:custom.currentStage}.json):CONFIG_CLASSROOM_TABLE}
    CONFIG_CLASSROOM_USER_TABLE: ${file(./config.${self:custom.currentStage}.json):CONFIG_CLASSROOM_USER_TABLE}
    CONFIG_INSTANCE_TABLE: ${file(./config.${self:custom.currentStage}.json):CONFIG_INSTANCE_TABLE}
    CONFIG_PROJECT_TABLE: ${file(./config.${self:custom.currentStage}.json):CONFIG_PROJECT_TABLE}
    CONFIG_TEMPLATE_TABLE: ${file(./config.${self:custom.currentStage}.json):CONFIG_TEMPLATE_TABLE}
    CONFIG_USER_TABLE: ${file(./config.${self:custom.currentStage}.json):CONFIG_USER_TABLE}

# packaging information
package:
  exclude:
    - node_modules
    - .dynamodb
  include:
    - functions/urls/**
  individually: true

functions:
  # Classroom endpoints
  createClassroom:
    handler: ./functions/classrooms/createClassroom/createClassroom.createClassroom
    events:
      - http:
          path: classroom
          method: post
          cors: true
  getClassroom:
    handler: ./functions/classrooms/getClassroom/getClassroom.getClassroom
    events:
      - http:
          path: classroom/{id}
          method: get
          cors: true
  updateClassroom:
    handler: ./functions/classrooms/updateClassroom/updateClassroom.updateClassroom
    events:
      - http:
          path: classroom/{id}
          method: put
          cors: true
  deleteClassroom:
    handler: ./functions/classrooms/deleteClassroom/deleteClassroom.deleteClassroom
    events:
      - http:
          path: classroom/{id}
          method: delete
          cors: true
  # Classroom Users endpoints
  createClassroomUser:
    handler: ./functions/classroomUsers/createClassroomUser/createClassroomUser.createClassroomUser
    events:
      - http:
          path: classroomUser
          method: post
          cors: true
  getClassroomUsers:
    handler: ./functions/classroomUsers/getClassroomUsers/getClassroomUsers.getClassroomUsers
    events:
      - http:
          path: classroomUser/getAllUsers/{classroomID}
          method: get
          cors: true
  getClassroomUser:
    handler: ./functions/classroomUsers/getClassroomUser/getClassroomUser.getClassroomUser
    events:
      - http:
          path: classroomUser/getUser/{id}
          method: get
          cors: true
  updateClassroomUser:
    handler: ./functions/classroomUsers/updateClassroomUser/updateClassroomUser.updateClassroomUser
    events:
      - http:
          path: classroomUser/{id}
          method: put
          cors: true
  deleteClassroomUser:
    handler: ./functions/classroomUsers/deleteClassroomUser/deleteClassroomUser.deleteClassroomUser
    events:
      - http:
          path: classroomUser/{id}
          method: delete
          cors: true
  # Instances endpoints
  createInstance:
    handler: ./functions/instances/createInstance/createInstance.createInstance
    events:
      - http:
          path: instance
          method: post
          cors: true
  getInstance:
    handler: ./functions/instances/getInstance/getInstance.getInstance
    events:
      - http:
          path: instance/{id}
          method: get
          cors: true
  deleteInstance:
    handler: ./functions/instances/deleteInstance/deleteInstance.deleteInstance
    events:
      - http:
          path: instance/{id}
          method: delete
          cors: true
  # Projects endpoints
  createProjects:
    handler: ./functions/projects/createProject/createProject.createProject
    events:
      - http:
          path: project
          method: post
          cors: true
  getProject:
    handler: ./functions/projects/getProject/getProject.getProject
    events:
      - http:
          path: project/{id}
          method: get
          cors: true
  deleteProject:
    handler: ./functions/projects/deleteProject/deleteProject.deleteProject
    events:
      - http:
          path: project/{id}
          method: delete
          cors: true
  # Templates endpoints
  createTemplate:
    handler: ./functions/templates/createTemplate/createTemplate.createTemplate
    events:
      - http:
          path: template
          method: post
          cors: true
  getTemplate:
    handler: ./functions/templates/getTemplate/getTemplate.getTemplate
    events:
      - http:
          path: template/{id}
          method: get
          cors: true
  # User endpoints
  createUser:
    handler: ./functions/users/createUser/createUser.createUser
    events:
      - http:
          path: user
          method: post
          cors: true
  getUser:
    handler: ./functions/users/getUser/getUser.getUser
    events:
      - http:
          path: user/{id}
          method: get
          cors: true
  deleteUser:
    handler: ./functions/users/deleteUser/deleteUser.deleteUser
    events:
      - http:
          path: user/{id}
          method: delete
          cors: true

# plugins
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
  serverless-offline:
    httpPort: 4000

resources:
  Resources:
    classroomTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: classroom
        AttributeDefinitions:
          - AttributeName: classroomID
            AttributeType: S
        KeySchema:
          - AttributeName: classroomID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    classroomUsersTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: classroomUser
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    instanceTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: instance
        AttributeDefinitions:
          - AttributeName: instanceID
            AttributeType: S
        KeySchema:
          - AttributeName: instanceID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    projectTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: project
        AttributeDefinitions:
          - AttributeName: projectID
            AttributeType: S
        KeySchema:
          - AttributeName: projectID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    templateTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: template
        AttributeDefinitions:
          - AttributeName: templateID
            AttributeType: S
        KeySchema:
          - AttributeName: templateID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    userTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: user
        AttributeDefinitions:
          - AttributeName: userID
            AttributeType: S
        KeySchema:
          - AttributeName: userID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
